package dxl_communication;

import java.util.Dictionary;
import java.util.HashMap;
import java.util.Map;

import java_native_access.IDynamixelControl;

/** 
 * The methods in this class are used for communication between the computer and the Dynamixel sensor(s).
 * 
 * Supplementary information can be found online at: http://support.robotis.com/en/product/auxdevice/sensor/dxl_ax_s1.htm
 * 
 * */

 public class SensorControl{


	 private static int DEFAULT_PORTNUM = 3; //com3
	 private static int DEFAULT_BAUDNUM = 1; //mbps	
		


     // Base functions: 

     /** 
     * Attempts to initialize the communication devices
     * @return 1 if success, 0 if failure
     */
     public static int initialize(){
         return IDynamixelControl.INSTANCE.dxl_initialize(DEFAULT_PORTNUM, DEFAULT_BAUDNUM);
     }

     /** 
     * Terminates the communication devices
     */
     public static void terminate(){
         IDynamixelControl.INSTANCE.dxl_terminate();
     }

     /** 
     * reads a byte or word from the Dynamixel actuator
     * 
     * @param id Dynamixel actuator ID
     * @param address Memory address to read from (see Control Table)
     * @return Value at the memory address
     */
     public static int readFromDxl(int id, int address){
         if (isSingleByteAddress(address)) return readByteFromDxl(id, address);
         else return readWordFromDxl(id, address);
     }

     /** 
     * writes a byte or word to the Dynamixel actuator
     * (checks whether the input is a byte or word before execution)
     * @param id Dynamixel actuator ID
     * @param address Memory address to write to (see Control Table)
     * @param value Value to write
     */
     public static void writeToDxl(int id, int address, int value){
         if (isSingleByteAddress(address)) writeByteToDxl(id, address, value);
         else writeWordToDxl(id, address, value);
     }

     /** 
     * Returns the model number of the Dynamixel
     * @param id Dynamixel actuator ID
     * @return Model number
     */
     public static int getModelNumber(int id){
         return readFromDxl(id, controlTableDictionary.get("model number(l)"));
     }

     /** 
     * Returns firmware version
     * @param id Dynamixel actuator ID
     * @return Firmware version
     */
     public static int getVersionOfFirmware(int id){
         return readFromDxl(id, controlTableDictionary.get("version of firmware"));
     }

     /** 
     * Returns the ID of the actuator
     * 254 is the Broadcast ID
     * @param id Dynamixel actuator ID (to check)
     * @return Dynamixel actuator ID, range: 0-254
     */
     public static int getID(int id){
         return readFromDxl(id, controlTableDictionary.get("id"));
     }

     /** 
     * sets the ID parameter on the Dynamixel actuator
     * 254 is the Broadcast ID
     * @param id Dynamixel actuator ID
     * @param newID New ID value, range: 0-254
     */
     public static void setID(int id, int newID){
         if (newID < 0) newID = 0;
         if (newID > 254) newID = 254;
         writeToDxl(id, controlTableDictionary.get("id"), newID);
     }

     /** 
     * Returns the baudrate
     * The Baud Rate represents the communication speed (0-254).
     * @param id Dynamixel actuator ID
     * @return Baudrate, range: 0-254
     */
     public static int getBaudrate(int id){
         return readFromDxl(id, controlTableDictionary.get("baud rate"));
     }

     /** 
     * sets the baudrate
     * The Baud Rate represents the communication speed (0-254).
     * @param id Dynamixel actuator ID
     * @param newBaud New baudrate value, range: 0-254
     */
     public static void setBaudrate(int id, int newBaud){
         if (newBaud < 0) newBaud = 0;
         if (newBaud > 254) newBaud = 254;
         writeToDxl(id, controlTableDictionary.get("baud rate"), newBaud);
     }

     /** 
     * Returns Return Delay Time
     * Return Delay Time is the delay time from an Instruction Packet is 
     * transmitted, until a Status Packet is received (0-254).
     * Unit: 2 usec
     * @param id Dynamixel actuator ID
     * @return Return Delay Time, range: 0-254
     */
     public static int getReturnDelayTime(int id){
         return readFromDxl(id, controlTableDictionary.get("return delay time"));
     }

     /** 
     * set Return Delay Time
     * Return Delay Time is the delay time from an Instruction Packet is 
     * transmitted, until a Status Packet is received (0-254).
     * Unit: 2 usec
     * @param id Dynamixel actuator ID
     * @param newReturnDelayTime New Return Delay Time value, range: 0-254
     */
     public static void setReturnDelayTime(int id, int newReturnDelayTime){
         if (newReturnDelayTime < 0) newReturnDelayTime = 0;
         if (newReturnDelayTime > 254) newReturnDelayTime = 254;
         writeToDxl(id, controlTableDictionary.get("return delay time"), newReturnDelayTime);
     }

     /** 
     * Returns Status Return Level
     * Decides how to return the Status Packet.
     * Value 0: No return against all commands (except PING)
     * Value 1: Return only for the read command
     * Value 2: Return for all commands
     * @param id Dynamixel actuator ID
     * @return Status Return Level, 0, 1 or 2
     */
     public static int getStatusReturnLevel(int id){
         return readFromDxl(id, controlTableDictionary.get("status return level"));
     }

     /** 
     * sets the Status Return Level
     * Decides how to return the Status Packet.
     * Value 0: No return against all commands (except PING)
     * Value 1: Return only for the read command
     * Value 2: Return for all commands
     * @param id Dynamixel actuator ID
     * @param value New Status Return Level value, 0, 1 or 2
     */
     public static void setStatusReturnLevel(int id, int value){
         if (value < 0 || value > 3) return;
         else writeToDxl(id, controlTableDictionary.get("status return level"), value);
     }


     /** 
     * Left IR sensor value for distance measure. 
     * Infrared rays are emitted from the IR-emitting part. The sensors measure the amount of reflected rays. 
     * A higher value means that more rays are reflected, e.g. objects are located closer. 
     * @param id Dynamixel sensor ID
     * @return A value between 0-255
     */
     public static int getIRLeftFireData(int id){
         return readFromDxl(id, controlTableDictionary.get("ir left fire data"));
     }

     /** 
     * Center IR sensor value for distance measure. 
     * Infrared rays are emitted from the IR-emitting part. The sensors measure the amount of reflected rays. 
     * A higher value means that more rays are reflected, e.g. objects are located closer. 
     * @param id Dynamixel sensor ID
     * @return A value between 0-255
     */
     public static int getIRCenterFireData(int id){
         return readFromDxl(id, controlTableDictionary.get("ir center fire data"));
     }

     /** 
     * Right IR sensor value for distance measure. 
     * Infrared rays are emitted from the IR-emitting part. The sensors measure the amount of reflected rays. 
     * A higher value means that more rays are reflected, e.g. objects are located closer. 
     * @param id Dynamixel sensor ID
     * @return A value between 0-255
     */
     public static int getIRRightFireData(int id){
         return readFromDxl(id, controlTableDictionary.get("ir right fire data"));
     }

     /** 
     * Left Light Brightness Sensor
     * Measures the amount of infrared rays. 
     * Similar to the distance measurement, but without any IR-self-emittion. 
     * A higher value means more brightness
     * @param id Dynamixel sensor ID
     * @return A value between 0-255
     */
     public static int getLightLeftData(int id){
         return readFromDxl(id, controlTableDictionary.get("light left data"));
     }

     /** 
     * Center Light Brightness Sensor
     * Measures the amount of infrared rays. 
     * Similar to the distance measurement, but without any IR-self-emittion. 
     * A higher value means more brightness
     * @param id Dynamixel sensor ID
     * @return A value between 0-255
     */
     public static int getLightCenterData(int id){
         return readFromDxl(id, controlTableDictionary.get("light center data"));
     }

     /** 
     * Right Light Brightness Sensor
     * Measures the amount of infrared rays. 
     * Similar to the distance measurement, but without any IR-self-emittion. 
     * A higher value means more brightness
     * @param id Dynamixel sensor ID
     * @return A value between 0-255
     */
     public static int getLightRightData(int id){
         return readFromDxl(id, controlTableDictionary.get("light right data"));
     }

     /** 
     * Returns whether an object is detected within the defined range or not.
     * If IR Distance Sensor value (IR Fire Data) is greater than the compare value, 1 is returned.
     * The detection compare value can be changed by using the function setIRObstacleDetectCompareRD
     * @param id Dynamixel sensor ID
     * @return 0: no object detected within range, 1: object detected
     */
     public static int getIRObstacleDetected(int id){
         return readFromDxl(id, controlTableDictionary.get("ir obstacle detected"));
     }


     /** 
     * Returns whether the brightness sensor value (Light data) is greater than the compare value, or not.
     * The detection compare value can be changed by using the function setIRObstacleDetectCompareRD
     * @param id Dynamixel sensor ID
     * @return 0: darker than reference value, 1: brighter than reference value
     */
     public static int getLightDetected(int id){
         return readFromDxl(id, controlTableDictionary.get("light detected"));
     }

     /** 
     * Measures the level of sound being recorded by the microphone. 
     * The sound level is measured 3800 times/sec
     * Returns a numerical value: If no sound, 127-128 is returned, and the 
     * value approaces 0 or 255 as it gets _louder_. 
     * @param id Dynamixel sensor ID
     * @return No sound: 127-128. Louder sounds: values close to 0 or 255
     */
     public static int getSoundData(int id){
         return readFromDxl(id, controlTableDictionary.get("sound data"));
     }


     /** 
     * Returns the maximum sound level
     * If the sound level during sound measurement exceeds the current maximum,
     * the value is updated (setSoundDataMaxHold). 
     * To make sure that the value will be updated, reset the value before measurement (set value to 0)!
     * Sound levels beneath 128 are ignored. 255 is maximum. 
     * @param id Dynamixel sensor ID
     * @return Maximum sound level
     */
     public static int getSoundDataMaxHold(int id){
         return readFromDxl(id, controlTableDictionary.get("sound data max hold"));
     }

     /** 
     * sets the maximum sound level
     * This function can be used to reset the maximum sound level value, 
     * to ensure that the value is up to date after a measurement, by setting the value to 0.
     * (The maximum sound level is only updated if it exceeds the current value. Therefore,
     * if the current value is louder than the loudest sound level during a measurement, the 
     * value will not be updated)
     * @param id Dynamixel sensor ID
     * @param value Maximum sound level value. To reset, send 0
     */
     public static void setSoundDataMaxHold(int id, int value){
         writeToDxl(id, controlTableDictionary.get("sound data max hold"), value);
     }

     /** 
     * Returns the number of times a certain sound level is measured
     * (See online manual for supplementary information)
     * @param id Dynamixel sensor ID
     * @return 	
     */
     public static int getSoundDetectedCount(int id){
         return readFromDxl(id, controlTableDictionary.get("sound detected count"));
     }

     /** 
     * See online manual for information
     * @param id Dynamixel sensor ID
     * @param value
     */
     public static void setSoundDetected(int id, int value){
         writeToDxl(id, controlTableDictionary.get("sound detected count"), value);
     }

     /** 
     * Saves the time of the moment a sound detection occurd.
     * See online manual for supplementary information
     * @param id Dynamixel sensor ID
     * @return
     */
     public static int getSoundDetectedTime(int id){
         return readFromDxl(id, controlTableDictionary.get("sound detected time"));
     }

     /** 
     * See online manual for information
     * @param id <Dynamixel sensor ID/param>
     * @param value
     */
     public static void setSoundDetectedTime(int id, int value){
         writeToDxl(id, controlTableDictionary.get("sound detected time"), value);
     }


     
     /**
     * Returns the current set buzzer note (noteAddress) on the Dynamixel sensor
     * Note table:
     * http://support.robotis.com/en/product/auxdevice/sensor/dxl_ax_s1.htm#Ax_S1_Address_28
     * @param id Dynamixel sensor ID
     * @return The current set buzzer note
	 */
     public static int getBuzzerData0(int id){
         return readFromDxl(id, controlTableDictionary.get("buzzer data 0"));
     }

     
     /**
     * Plays the desired buzzer note (noteAddress) on the Dynamixel sensor
     * Note table: 
     * http://support.robotis.com/en/product/auxdevice/sensor/dxl_ax_s1.htm#Ax_S1_Address_28
     * @param id Dynamixel sensor ID
     * @param noteAddress Buzzer note (see buzzer note table online)
     */
     public static void setBuzzerData0(int id, int noteAddress){
         writeToDxl(id, controlTableDictionary.get("buzzer data 0"), noteAddress);
     }
     


     /** 
     * Returns the current set buzzer ringing time. 
     * A returned value of 50 --> 5 seconds.
     * @param id Dynamixel sensor ID
     * @return Unit: 0.1 second
     */
     public static int getBuzzerData1(int id){
         return readFromDxl(id, controlTableDictionary.get("buzzer data 1"));
     }

     /** 
     * set buzzer ringing time
     * A value of 50 --> 5 seconds.
     * @param id Dynamixel sensor ID
     * @param value Ringing time. Unit: 0.1 second
     */
     public static void setBuzzerData1(int id, int value){
         writeToDxl(id, controlTableDictionary.get("buzzer data 1"), value);
     }


     /** 
     * Returns whether Instruction is registered
     * @param id Dynamixel actuator ID
     * @return False: 0, true: 1
     */
     public static int getRegistered(int id){
         return readFromDxl(id, controlTableDictionary.get("registered"));
     }

     /** 
     * See online manual for instructions
     * @param id Dynamixel sensor ID
     * @param value
     */
     public static void setRegistered(int id, int value){
         writeToDxl(id, controlTableDictionary.get("registered"), value);
     }

     /** 
     * IR remote controller communication status.
     * AX-S1 can communicate through its infrared emitters and sensors.
     * If data is received, the value is updated to '2', e.g. 2 bytes are received.
     * If these data are read, the value is set back to '0'.
     * @param id Dynamixel sensor ID
     * @return 2: new, unread data. 0: no new data
     */
     public static int getIRRemoconArrived(int id){
         return readFromDxl(id, controlTableDictionary.get("ir remocon arrived"));
     }

     /** 
     * Returns whether EEPROM is locked
     * EEPROM is a memory area (addresses 0-18) that can be locked from modification
     * @param id Dynamixel actuator ID
     * @return False: 0, true: 1
     */
     public static int getLock(int id){
         return readFromDxl(id, controlTableDictionary.get("lock"));
     }

     /** 
     * sets the EEPROM lock
     * EEPROM is a memory area (addresses 0-18) that can be locked from modification
     * @param id Dynamixel actuator ID
     * @param value Lock: 1, unlock: 0
     */
     public static void setLock(int id, int value){
         if (value != 0 || value != 1) return;
         else writeToDxl(id, controlTableDictionary.get("lock"), value);
     }

     /** 
     * Returns received Remocon sensor data (IR remote control data).
     * If this data is read, remocon arrived data will be set to 0 (marked as read).
     * @param id Dynamixel sensor ID
     * @return Received Remocon data
     */
     public static int getRemoconRXData(int id){
         return readFromDxl(id, controlTableDictionary.get("remocon rx data 0"));
     }

     /** 
     * Returns Remocon data (IR remote control data) to be transmitted 
     * @param id Dynamixel sensor ID
     * @return Remocon data to be transmitted
     */
     public static int getRemoconTXData(int id){
         return readFromDxl(id, controlTableDictionary.get("remocon tx data 0"));
     }

     /** 
     * set the Remocon data (IR remote control data) to be transmitted
     * 2 bytes of data can be transmitted
     * @param id Dynamixel sensor ID
     * @param value Value to transmit via IR
     */
     public static void setRemoconTXData(int id, int value){
         writeToDxl(id, controlTableDictionary.get("remocon tx data 0"), value);
     }

     /** 
     * Returns the current IR obstacle detection compare value
     * This value is used in the IRObstacleDetected method.
     * If '0': low sensitive mode; used for close range.
     * See online manual for supplementary information:
     * http://support.robotis.com/en/product/auxdevice/sensor/dxl_ax_s1.htm#Ax_S1_Address_34
     * @param id Dynamixel sensor ID
     * @return The current IR detection compare value
     */
     public static int getIRObstacleDetectCompareRD(int id){
         return readFromDxl(id, controlTableDictionary.get("ir obstacle detect comparerd"));
     }


     /** 
     * sets the current IR obstacle detection compare value
     * This value is used in the IRObstacleDetected method.
     * See online manual for supplementary information:
     * http://support.robotis.com/en/product/auxdevice/sensor/dxl_ax_s1.htm#Ax_S1_Address_34
     * @param id
     * @param value
     */
     public static void setIRObstacleDetectCompareRD(int id, int value){
         writeToDxl(id, controlTableDictionary.get("ir obstacle detect compared"), value);
     }

     /** 
     * Returns the current Light detect compare value. 
     * This value is used in the getLightDetected method.
     * @param id Dynamixel sensor ID
     * @return Light detect compare value
     */
     public static int getLightDetectCompareRD(int id){
         return readFromDxl(id, controlTableDictionary.get("light detect comparerd"));
     }

     /** 
     * sets the current Light detect compare value. 
     * This value is used in the getLightDetected method.
     * @param id Dynamixel sensor ID
     * @param value New light detect compare value
     */
     public static void setLightDetectCompareRD(int id, int value){
         writeToDxl(id, controlTableDictionary.get("light detect compared"), value);
     }



     /*
      * ADDITIONAL METHODS for improved usability: 
      */

     /**
     * Returns the current set buzzer note on the Dynamixel sensor. 
     * (This method runs GetBuzzerData0)
     * See online manual for note table:
     * http://support.robotis.com/en/product/auxdevice/sensor/dxl_ax_s1.htm#Ax_S1_Address_28
     * @param id Dynamixel sensor ID
     * @return The current buzzer note
     */
     public static int getCurrentBuzzerNote(int id){
         return getBuzzerData0(id);
     }
     
     
     /**
     * Play buzzer notes. Simple beep sounds can be made. 52 musical notes can be made 
     * in buzzer tones, and there are also whole- and halftones in each octave.
     * (This method runs SetBuzzerData0).
     * See online manual for note table: 
     * (http://support.robotis.com/en/product/auxdevice/sensor/dxl_ax_s1.htm#Ax_S1_Address_28)
     * @param id Dynamixel sensor ID
     * @param noteAddress Buzzer note to play
     */
     public static void playBuzzerNote(int id, int noteAddress){
         setBuzzerData0(id, noteAddress);
     }
     

     /** 
     * Returns the current set buzzer ringing time. 
     * A returned value of 50 --> 5 seconds.
     * 
     * @param id Dynamixel sensor ID
     * @return Unit: 0.1 second
     */
     public static int getBuzzerRingingTime(int id){
         return getBuzzerData1(id);
     }

     /** 
     * set buzzer ringing time
     * A value of 50 --> 5 seconds.
     * 
     * @param id Dynamixel sensor ID
     * @param value Ringing time. Unit: 0.1 second
     */
     public static void setBuzzerRingingTime(int id, int value){
         setBuzzerData1(id, value);
     }

     /** 
     * Resets the Sound Data Max Hold, so that it is prepared for a new measurement.
     * @param id Dynamixel sensor ID
     */
     public static void ResetSoundDataMaxHold(int id){
         setSoundDataMaxHold(id, 0);
     }



     /* 
      * The following subroutines are used internally: 
      * */

     private static void writeByteToDxl(int id, int address, int value){
         IDynamixelControl.INSTANCE.dxl_write_byte(id, address, value);
     }

     private static void writeWordToDxl(int id, int address, int value){
         IDynamixelControl.INSTANCE.dxl_write_word(id, address, value);
     }

     private static int readByteFromDxl(int id, int address){
         return IDynamixelControl.INSTANCE.dxl_read_byte(id, address);
     }

     private static int readWordFromDxl(int id, int address){
         return IDynamixelControl.INSTANCE.dxl_read_word(id, address);
     }



     // Help functions and variables:
     private static int[] singleByteAddresses = new int[] { 2, 3, 4, 5, 16, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 40, 41, 44, 46, 47, 52, 53 };

 	/**
 	 * Checks whether this address contains a value that consists of a single byte
 	 * @param actuator address to check
 	 */
 	private static boolean isSingleByteAddress(int address){
 		boolean isSingle = false;
 		for(int i = 0; i < singleByteAddresses.length; ++i){
 			if(singleByteAddresses[i] == address)
 			{
 				isSingle = true;
 				break;
 			}
 		}

 		return isSingle;
 	}

     /** 
     * Dictionary containing the control table. Key is parameter name, value is address. 
     * */
     private static Map<String, Integer> controlTableDictionary = new HashMap<String, Integer>();
     static{  // dictionary entries:
         controlTableDictionary.put("model number(l)", 0);
         controlTableDictionary.put("model number(h)", 1);
         controlTableDictionary.put("version of firmware", 2);
         controlTableDictionary.put("id", 3);
         controlTableDictionary.put("baud rate", 4);
         controlTableDictionary.put("return delay time", 5);
         controlTableDictionary.put("status return level", 16);
         controlTableDictionary.put("ir left fire data", 26);
         controlTableDictionary.put("ir center fire data", 27);
         controlTableDictionary.put("ir right fire data", 28);
         controlTableDictionary.put("light left data", 29);
         controlTableDictionary.put("light center data", 30);
         controlTableDictionary.put("light right data", 31);
         controlTableDictionary.put("ir obstacle detected", 32);
         controlTableDictionary.put("light detected", 33);
         controlTableDictionary.put("sound data", 35);
         controlTableDictionary.put("sound data max hold", 36);
         controlTableDictionary.put("sound detected count", 37);
         controlTableDictionary.put("sound detected time(l)", 38);
         controlTableDictionary.put("sound detected time(h)", 39);
         controlTableDictionary.put("buzzer data 0", 40);
         controlTableDictionary.put("buzzer data 1", 41);
         controlTableDictionary.put("registered", 44);
         controlTableDictionary.put("ir remocon arrived", 46);
         controlTableDictionary.put("lock", 47);
         controlTableDictionary.put("remocon rx data 0", 48);
         controlTableDictionary.put("remocon rx data 1", 49);
         controlTableDictionary.put("remocon tx data 0", 50);
         controlTableDictionary.put("remocon tx data 1", 51);
         controlTableDictionary.put("ir obstacle detect comparerd", 52);
         controlTableDictionary.put("light detect comparerd", 53);
     }



}
